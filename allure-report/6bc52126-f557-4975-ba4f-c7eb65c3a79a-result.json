{"name": "test_home_screen", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span andiallelmwithtext=\"14\" tuafontsizes=\"14\">...</span> is not clickable at point (547, 644). Other element would receive the click: <li id=\"ember1174\" value=\"393\" class=\"ember-view bm-select-option\" role=\"option\" tabindex=\"-1\" aria-selected=\"false\" uaindex=\"2\">...</li>\n  (Session info: chrome=116.0.5845.141)\nStacktrace:\n\tGetHandleVerifier [0x00007FF69F6852A2+57122]\n\t(No symbol) [0x00007FF69F5FEA92]\n\t(No symbol) [0x00007FF69F4CE3AB]\n\t(No symbol) [0x00007FF69F50D783]\n\t(No symbol) [0x00007FF69F50BD5F]\n\t(No symbol) [0x00007FF69F509DC8]\n\t(No symbol) [0x00007FF69F508FD5]\n\t(No symbol) [0x00007FF69F4FF25F]\n\t(No symbol) [0x00007FF69F526FDA]\n\t(No symbol) [0x00007FF69F4FEB76]\n\t(No symbol) [0x00007FF69F5271F0]\n\t(No symbol) [0x00007FF69F53EB82]\n\t(No symbol) [0x00007FF69F526DB3]\n\t(No symbol) [0x00007FF69F4FD2B1]\n\t(No symbol) [0x00007FF69F4FE494]\n\tGetHandleVerifier [0x00007FF69F92EF82+2849794]\n\tGetHandleVerifier [0x00007FF69F981D24+3189156]\n\tGetHandleVerifier [0x00007FF69F97ACAF+3160367]\n\tGetHandleVerifier [0x00007FF69F716D06+653702]\n\t(No symbol) [0x00007FF69F60A208]\n\t(No symbol) [0x00007FF69F6062C4]\n\t(No symbol) [0x00007FF69F6063F6]\n\t(No symbol) [0x00007FF69F5F67A3]\n\tBaseThreadInitThunk [0x00007FFCAE497614+20]\n\tRtlUserThreadStart [0x00007FFCAF0426B1+33]", "trace": "self = <test_buyme.TestBuyMe testMethod=test_home_screen>\n\n    def test_home_screen(self):\n        AdditionalFunctions.Catch_Pop_Up(self)\n        # HomeScreen.login(self)\n        HomeScreen.choose_an_amount(self)\n        HomeScreen.choose_an_area(self)\n>       HomeScreen.choose_a_category(self)\n\ntest_buyme.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nhome_screen.py:36: in choose_a_category\n    self.driver.find_element(By.XPATH, \"//span[contains(text(), 'גיפט קארד למותגי אופנה')]\").click()\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\buyme-4NEGsUiN-py3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\buyme-4NEGsUiN-py3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\buyme-4NEGsUiN-py3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F8A69A1910>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF69F5F67A3]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCAE497614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFCAF0426B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span andiallelmwithtext=\"14\" tuafontsizes=\"14\">...</span> is not clickable at point (547, 644). Other element would receive the click: <li id=\"ember1174\" value=\"393\" class=\"ember-view bm-select-option\" role=\"option\" tabindex=\"-1\" aria-selected=\"false\" uaindex=\"2\">...</li>\nE         (Session info: chrome=116.0.5845.141)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF69F6852A2+57122]\nE       \t(No symbol) [0x00007FF69F5FEA92]\nE       \t(No symbol) [0x00007FF69F4CE3AB]\nE       \t(No symbol) [0x00007FF69F50D783]\nE       \t(No symbol) [0x00007FF69F50BD5F]\nE       \t(No symbol) [0x00007FF69F509DC8]\nE       \t(No symbol) [0x00007FF69F508FD5]\nE       \t(No symbol) [0x00007FF69F4FF25F]\nE       \t(No symbol) [0x00007FF69F526FDA]\nE       \t(No symbol) [0x00007FF69F4FEB76]\nE       \t(No symbol) [0x00007FF69F5271F0]\nE       \t(No symbol) [0x00007FF69F53EB82]\nE       \t(No symbol) [0x00007FF69F526DB3]\nE       \t(No symbol) [0x00007FF69F4FD2B1]\nE       \t(No symbol) [0x00007FF69F4FE494]\nE       \tGetHandleVerifier [0x00007FF69F92EF82+2849794]\nE       \tGetHandleVerifier [0x00007FF69F981D24+3189156]\nE       \tGetHandleVerifier [0x00007FF69F97ACAF+3160367]\nE       \tGetHandleVerifier [0x00007FF69F716D06+653702]\nE       \t(No symbol) [0x00007FF69F60A208]\nE       \t(No symbol) [0x00007FF69F6062C4]\nE       \t(No symbol) [0x00007FF69F6063F6]\nE       \t(No symbol) [0x00007FF69F5F67A3]\nE       \tBaseThreadInitThunk [0x00007FFCAE497614+20]\nE       \tRtlUserThreadStart [0x00007FFCAF0426B1+33]\n\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\buyme-4NEGsUiN-py3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "stdout", "source": "30fbc8be-6c5b-45f9-b0c5-a2344efb6486-attachment.txt", "type": "text/plain"}], "start": 1693769587516, "stop": 1693769599357, "uuid": "80abfe91-eb7f-4fa5-8ef1-4e78114bf0ea", "historyId": "f22e57b03b44f663caf65b5d5e4d4c27", "testCaseId": "f22e57b03b44f663caf65b5d5e4d4c27", "fullName": "test_buyme.TestBuyMe#test_home_screen", "labels": [{"name": "suite", "value": "test_buyme"}, {"name": "subSuite", "value": "TestBuyMe"}, {"name": "host", "value": "DESKTOP-TN6JOVD"}, {"name": "thread", "value": "17964-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_buyme"}]}